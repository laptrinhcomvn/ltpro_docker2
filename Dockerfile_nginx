FROM nginx:alpine-perl as modsecurity-builder

ENV MODSEC_BRANCH=v3.0.4

RUN apk add --no-cache --virtual general-dependencies \
    gcc \
    libc-dev \
    make \
    openssl-dev \
    zlib-dev \
    linux-headers \
    curl \
    gnupg \
    libxslt-dev \
    gd-dev \
    perl-dev \
    pcre-dev \
    libxml2-dev \
    git \
    libtool \
    automake \
    autoconf \
    g++ \
    flex \
    bison \
    yajl-dev \
    gzip \
    geoip-dev \
    libstdc++ \
    sed

WORKDIR /opt/ModSecurity

RUN echo "Installing ModSec Library" && \
    git clone -b ${MODSEC_BRANCH} --single-branch https://github.com/SpiderLabs/ModSecurity . && \
    git submodule init && \
    git submodule update && \
    ./build.sh && \
    ./configure && \
    make && \
    make install

RUN strip /usr/local/modsecurity/bin/* /usr/local/modsecurity/lib/*.a /usr/local/modsecurity/lib/*.so*




FROM nginx:alpine-perl as ext-builder

ENV NGINX_VERSION=1.19.3
ENV NGX_REDIS_VERSION=0.3.9
ENV LUAJIT_LIB=/usr/lib
ENV LUAJIT_INC=/usr/include/luajit-2.1

RUN apk add --no-cache --virtual general-dependencies build-base \
    gcc \
    libc-dev \
    make \
    openssl-dev \
    zlib-dev \
    linux-headers \
    curl \
    gnupg \
    libxslt-dev \
    gd-dev \
    perl-dev \
    pcre-dev \
    libxml2-dev \
    git \
    libtool \
    automake \
    autoconf \
    g++ \
    flex \
    bison \
    luajit-dev \
    yajl-dev \
    gzip \
    geoip-dev \
    libstdc++ \
    sed \
    musl-dev \
    libmaxminddb-dev


WORKDIR /opt

RUN git clone --depth 1 https://github.com/SpiderLabs/ModSecurity-nginx.git

COPY --from=modsecurity-builder /usr/local/modsecurity/ /usr/local/modsecurity/

RUN git clone --recursive https://github.com/google/ngx_brotli.git

RUN git clone  --recursive https://github.com/winshining/nginx-http-flv-module.git

RUN git clone --recursive https://github.com/yaoweibin/ngx_http_substitutions_filter_module.git

RUN git clone --recursive https://github.com/openresty/echo-nginx-module.git

RUN git clone  --recursive https://github.com/leev/ngx_http_geoip2_module.git

RUN git clone --recursive https://github.com/simplresty/ngx_devel_kit.git

RUN git clone --recursive https://github.com/openresty/lua-nginx-module.git

RUN git clone http://luajit.org/git/luajit-2.0.git && cd luajit-2.0 && make && make install

RUN git clone --recursive https://github.com/openresty/srcache-nginx-module.git

RUN git clone --recursive https://github.com/openresty/redis2-nginx-module.git

RUN git clone --recursive https://github.com/openresty/set-misc-nginx-module.git

RUN git clone --recursive https://github.com/openresty/headers-more-nginx-module.git


RUN wget https://people.freebsd.org/~osa/ngx_http_redis-${NGX_REDIS_VERSION}.tar.gz && \
    tar -xzvf ngx_http_redis-${NGX_REDIS_VERSION}.tar.gz && \
    rm -f ngx_http_redis-${NGX_REDIS_VERSION}.tar.gz    

RUN wget https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz && \
    tar xzf nginx-${NGINX_VERSION}.tar.gz

# build nginx with aditional extension modules
WORKDIR /opt

RUN cd nginx-"$NGINX_VERSION" && \
    ./configure \
        --prefix=/etc/nginx \
        --sbin-path=/usr/sbin/nginx \
        --modules-path=/usr/lib/nginx/modules \
        --conf-path=/etc/nginx/nginx.conf \
        --http-client-body-temp-path=/var/cache/nginx/client_temp \
        --http-proxy-temp-path=/var/cache/nginx/proxy_temp \
        --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \
        --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \
        --http-scgi-temp-path=/var/cache/nginx/scgi_temp \
        --error-log-path=/var/log/nginx/error.log \
        --http-log-path=/var/log/nginx/access.log \
        --user=www-data \
        --group=www-data \
        --with-pcre-jit \
        --with-http_ssl_module \
        --with-http_realip_module \
        --with-http_addition_module \
        --with-http_auth_request_module \
        --with-http_sub_module \
        --with-http_dav_module \
        --with-http_flv_module \
        --with-http_mp4_module \
        --with-http_gunzip_module \
        --with-http_gzip_static_module \
        --with-http_random_index_module \
        --with-http_stub_status_module \
        --with-http_secure_link_module \
        --with-http_image_filter_module=dynamic \
        --with-http_xslt_module=dynamic \
        --with-http_perl_module=dynamic \
        --with-threads \
        --with-stream \
        --with-stream_ssl_module \
        --with-stream_ssl_preread_module \
        --with-stream_realip_module \
        --with-http_slice_module \
        --with-mail \
        --with-mail_ssl_module \
        --with-file-aio \
        --with-http_v2_module \
        --add-dynamic-module=../ngx_brotli \
        --add-dynamic-module=../ModSecurity-nginx \
        --add-dynamic-module=../ngx_http_geoip2_module \
        --add-dynamic-module=../nginx-http-flv-module \
        --add-dynamic-module=../echo-nginx-module \
        --add-dynamic-module=../ngx_devel_kit \
        --add-dynamic-module=../lua-nginx-module \
        --add-dynamic-module=../srcache-nginx-module \
        --add-dynamic-module=../redis2-nginx-module \
        --add-dynamic-module=../set-misc-nginx-module \
        --add-dynamic-module=../ngx_http_redis-0.3.9 \
        --add-dynamic-module=../ngx_http_substitutions_filter_module \
        --add-dynamic-module=../headers-more-nginx-module \
        --with-compat && \
        make -j$(getconf _NPROCESSORS_ONLN) && \
        make modules && \
        cp objs/*.so /usr/lib/nginx/modules/


WORKDIR /opt

RUN git clone -b v3.2/master https://github.com/SpiderLabs/owasp-modsecurity-crs && \
    mv owasp-modsecurity-crs/ /usr/local/





FROM nginx:alpine-perl

LABEL maintainer="Tung Le <tung@laptrinh.com.vn>"

# nginx 1.19.2

ENV LUAJIT_LIB=/usr/lib
ENV LUAJIT_INC=/usr/include/luajit-2.1
ENV GEO_DB_RELEASE=2020-09


# Copy nginx config from the intermediate container
COPY --from=ext-builder /etc/nginx/. /etc/nginx/

# Copy the /usr/local folder form the intermediate container (owasp-modsecurty-crs, modsecurity libs)
COPY --from=ext-builder /usr/local/. /usr/local/.
COPY --from=ext-builder /usr/lib/nginx/modules/. /usr/lib/nginx/modules/

RUN mkdir /etc/nginx/modsec && \
    rm -fr /etc/nginx/conf.d/ && \
    rm -fr /etc/nginx/nginx.conf

COPY ./server/nginx/nginx.conf /etc/nginx/nginx.conf
COPY ./server/nginx/statics.conf /etc/nginx/statics.conf
COPY ./server/nginx/sites-available/ /etc/nginx/sites-available/
RUN rm -f /etc/nginx/sites-enabled/default

COPY ./server/nginx/modsec/ /etc/nginx/modsec/
COPY ./server/nginx/owasp/ /usr/local/owasp-modsecurity-crs/

RUN apk upgrade --no-cache \
    && apk add --no-cache \
    yajl \
    luajit-dev \
    libstdc++ \
    tzdata \
    libmaxminddb-dev

RUN mkdir -p /etc/nginx/geoip && \
    wget https://download.db-ip.com/free/dbip-city-lite-${GEO_DB_RELEASE}.mmdb.gz && \
    wget https://download.db-ip.com/free/dbip-country-lite-${GEO_DB_RELEASE}.mmdb.gz && \
    gzip -d *.mmdb.gz && \
    mv dbip-city-lite-${GEO_DB_RELEASE}.mmdb dbip-city-lite.mmdb && \
    mv dbip-country-lite-${GEO_DB_RELEASE}.mmdb dbip-country-lite.mmdb && \
    mv *.mmdb /etc/nginx/geoip/


RUN mkdir -p /usr/www

# Nginx Create log dirs
RUN mkdir -p /var/log/nginx/
RUN touch /var/log/nginx/access.log
RUN touch /var/log/nginx/error.log

# ensure www-data user exists
RUN set -x ; \
    addgroup -g 82 -S www-data ; \
    adduser -u 82 -D -S -G www-data www-data && exit 0 ; exit 1
# 82 is the standard uid/gid for "www-data" in Alpine

# Set proper permissions for Nginx
RUN chown -R www-data:www-data /usr/www &&\
    install -d -m 0755 -o www-data -g www-data \
    /var/cache/nginx \
    /var/run/nginx &&\
    mkdir -p /var/log/nginx && \
    rm -rf /var/www/html &&\
    ln -sf /dev/stdout /var/log/nginx/access.log && \
    ln -sf /dev/stderr /var/log/nginx/error.log


# install tools: git, nano
RUN apk --update add --no-cache git less openssh nano && \
    rm -rf /var/lib/apt/lists/* && \
    rm -rf /var/cache/apk/* && \
    rm -rf /tmp/*

WORKDIR /usr/www/src

EXPOSE 80 443

STOPSIGNAL SIGTERM

CMD ["/usr/sbin/nginx", "-g", "daemon off;"]